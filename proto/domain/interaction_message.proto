syntax = "proto3";

package domain;

option java_package = "tr.com.pos.gem.posbc.api.grpc.domain";
option java_multiple_files = true;
option java_outer_classname = "InteractionMessageProtoContainer";

//==============================================================================
// MESSAGES SENT FROM SERVER TO CLIENT
//==============================================================================

/**
 * A generic, data-driven message sent from the server to the client that
 * describes a UI element for the client to render and await a user response.
 * This is the core message for all interactive flows.
 */
message PromptProto {
  // A unique ID generated by the server for this specific prompt. The client
  // MUST send this ID back in the corresponding `PromptResultProto`.
  string prompt_id = 1;

  // Required: The main instructional text to display to the user.
  // e.g., "Please enter your PIN".
  string message_text = 2;

  // Optional: Secondary text, often used to display a validation error or
  // status update without changing the main prompt. e.g., "Invalid PIN".
  optional string status_text = 3;

  // Optional: The title of the dialog window or screen.
  optional string title_text = 4;

  // Optional: A server-suggested timeout in seconds. The client should start a
  // timer and automatically fail the prompt if the user does not respond in time.
  optional int32 timeout_seconds = 5;

  /**
   * Describes the specific type of UI element the client should render.
   * Only one of these fields will be set per message.
   */
  oneof prompt_type {
    ConfirmationPromptProto confirmation_prompt = 10;
    DateTimePromptProto date_prompt = 11;
    InformationPromptProto information_prompt = 12;
    MoneyPromptProto money_prompt = 13;
    NumberPromptProto number_prompt = 14;
    SelectOnePromptProto select_one_prompt = 15;
    StringPromptProto string_prompt = 16;
  }
}

/**
 * A prompt asking for a simple Yes/No or Accept/Reject response.
 */
message ConfirmationPromptProto {
  // The mandatory text for the positive action button (e.g., "Continue", "Yes").
  string accept_label = 1;
  // The mandatory text for the negative action button (e.g., "Decline", "No").
  string reject_label = 2;
  // An optional, third action to explicitly cancel the flow.
  optional string cancel_label = 14;
}

/**
 * A prompt for date and/or time input.
 */
message DateTimePromptProto {
  /**
   * An enumeration of supported, structured date formats, providing a
   * type-safe contract for the client's renderer and a hint for the user.
   */
  enum DateTimeFormat {
    DATE_FORMAT_UNSPECIFIED = 0; // The default value, should not be used.
    DDMMYYYY = 1;                // Day/Month/Year format, e.g., 31/12/2025.
    MMDDYYYY = 2;                // Month/Day/Year format, e.g., 12/31/2025.
    YYYYMMDD = 3;                // Year-Month-Day format, e.g., 2025-12-31.
    DDMMYYYYHHMI = 4;            // Day/Month/Year Hour:Minute, e.g., 31/12/2025 15:30.
    MMYYYY = 5;                  // Month/Year format, e.g., 12/2025.
  }

  // The required format for the date input.
  DateTimeFormat date_format = 1;
  // An optional minimum selectable date/time (inclusive).
  optional SimpleDateTimeProto min_date = 2;
  // An optional maximum selectable date/time (inclusive).
  optional SimpleDateTimeProto max_date = 3;
  // The optional text for the primary confirmation button (e.g., "OK", "Submit").
  optional string ok_label = 13;
  // The optional text for a secondary cancel button.
  optional string cancel_label = 14;
}

/**
 * A prompt that displays an informational message that must be acknowledged.
 * It is typically represented by a single action button.
 */
message InformationPromptProto {
  // The text for the single acknowledgment button (e.g., "OK", "Continue").
  string acknowledge_label = 1;
  // An optional, secondary action to explicitly cancel the flow.
  optional string cancel_label = 14;
}

/**
 * A prompt for monetary input.
 */
message MoneyPromptProto {
  // The ISO 4217 currency code (e.g., "USD").
  string currency_code = 1;
  // The number of decimal places for the currency (e.g., 2 for USD, 0 for JPY).
  int32 decimal_places = 2;
  // Optional minimum allowed amount, in the currency's lowest denomination.
  optional int64 min_amount_in_lowest_denomination = 3;
  // Optional maximum allowed amount, in the currency's lowest denomination.
  optional int64 max_amount_in_lowest_denomination = 4;
  // The optional text for the "OK" button.
  optional string ok_label = 13;
  // The optional text for the "Cancel" button.
  optional string cancel_label = 14;
}

/**
 * A prompt for general numeric input.
 */
message NumberPromptProto {
  // If present, the client should enforce this minimum number of digits.
  optional int32 min_digits = 1;
  // If present, the client should enforce this maximum number of digits.
  optional int32 max_digits = 2;
  // If `true`, the client must mask the input (e.g., for a PIN).
  bool is_secret = 3;
  // The optional text for the "OK" button.
  optional string ok_label = 13;
  // The optional text for the "Cancel" button.
  optional string cancel_label = 14;
}

/**
 * A prompt asking the user to select one option from a list.
 */
message SelectOnePromptProto {
  /**
   * Represents a single, selectable choice in the list.
   */
  message Option {
    // The unique ID for this option, which the client will send back if selected.
    string id = 1;
    // A string containing one or more display values, separated by a server-defined delimiter.
    // This allows for rendering grid-like views.
    string delimited_display_texts = 2;
  }
  // The list of choices to present to the user.
  repeated Option options = 1;
  // The number of columns the client UI should use to render the grid of options.
  int32 column_count = 2;
  // A string containing column header texts, separated by a server-defined delimiter.
  optional string delimited_column_header_texts = 3;
  // The optional text for the "OK" button.
  optional string ok_label = 13;
  // The optional text for the "Cancel" button.
  optional string cancel_label = 14;
}

/**
 * A prompt for free-form alphanumeric text input.
 */
message StringPromptProto {
  // If present, the client should enforce this minimum number of characters.
  optional int32 min_length = 1;
  // If present, the client should enforce this maximum number of characters.
  optional int32 max_length = 2;
  // If `true`, the client must mask the input (e.g., for a password).
  bool is_secret = 3;
  // The optional text for the "OK" button.
  optional string ok_label = 13;
  // The optional text for the "Cancel" button.
  optional string cancel_label = 14;
}

/**
 * A simplified, serializable representation of a date and/or time.
 */
message SimpleDateTimeProto {
  // The full four-digit year (e.g., 2025).
  int32 year = 1;
  // The month of the year, from 1 (January) to 12 (December).
  int32 month = 2;
  // The day of the month, from 1 to 31. Optional for month/year formats.
  optional int32 day = 3;
  // The hour of the day, from 0 to 23. Optional for date-only formats.
  optional int32 hour = 4;
  // The minute of the hour, from 0 to 59. Optional for date-only formats.
  optional int32 minute = 5;
}

//==============================================================================
// MESSAGES SENT FROM CLIENT TO SERVER
//==============================================================================

/**
 * Contains the outcome of a specific UI prompt, sent from the client to the server.
 */
message PromptResultProto {
  // This MUST correspond to the `prompt_id` from the `PromptProto` that the user is responding to.
  string prompt_id = 1;

  /**
   * The outcome of the user's interaction.
   */
  oneof outcome {
    // Set if the user successfully completed the prompt.
    ResultValueProto value = 2;
    // Set if the user explicitly cancelled the prompt. The value is not significant.
    bool cancelled = 3;
  }
}

/**
 * A wrapper message that contains the specific result type, ensuring type safety.
 */
message ResultValueProto {
  oneof result_type {
    ConfirmationResultProto confirmation_result = 1;
    DateResultProto date_result = 2;
    InformationResultProto information_result = 3;
    MoneyResultProto money_result = 4;
    NumberResultProto number_result = 5;
    SelectOneResultProto selection_result = 6;
    StringResultProto string_result = 7;
  }
}

/**
 * The result for a `StringPromptProto`.
 */
message StringResultProto {
  // The string value entered by the user.
  string value = 1;
}

/**
 * The result for a `NumberPromptProto`.
 */
message NumberResultProto {
  // The numeric value entered by the user.
  int64 value = 1;
}

/**
 * The result for a `SelectOnePromptProto`.
 */
message SelectOneResultProto {
  // The unique `id` of the option selected by the user.
  string selected_id = 1;
}

/**
 * The result for a `ConfirmationPromptProto`.
 */
message ConfirmationResultProto {
  // `true` if the user chose the positive action, `false` for the negative action.
  bool accepted = 1;
}

/**
 * The result for an `InformationPromptProto`.
 * This message is intentionally empty as acknowledging it is the only action.
 */
message InformationResultProto {}

/**
 * The result for a `DateTimePromptProto`.
 */
message DateResultProto {
  // The date/time value selected by the user.
  SimpleDateTimeProto value = 1;
}

/**
 * The result for a `MoneyPromptProto`.
 */
message MoneyResultProto {
  // The total amount in the currency's smallest unit (e.g., cents).
  int64 amount_in_lowest_denomination = 1;
  // The ISO 4217 currency code, matching the original prompt.
  string currency_code = 2;
}

/**
 * Represents the client's locale settings.
 */
message LocaleProto {
  // The IETF BCP 47 language tag (e.g., "en-US", "tr-TR").
  string locale_code = 1;
}